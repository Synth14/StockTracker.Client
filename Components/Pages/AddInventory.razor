@page "/addinventory"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using StockTracker.Client.Models
@using StockTracker.Client.Services
@using MudBlazor
@inject IInventoryService _inventoryService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<MudText Typo="Typo.h3" GutterBottom="true">Ajout de matériel</MudText>

<EditForm Model="@inventoryItem" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" FormName="AddInventory">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudSelect T="string" Label="Marque" @bind-Value="inventoryItem.Brand">
                <MudSelectItem Value="@string.Empty">Choisir une marque</MudSelectItem>
                @foreach (var brand in brands)
                {
                    <MudSelectItem Value="@brand.Name">@brand.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="inventoryItem.Model" Label="Modèle" />
            <MudTextField @bind-Value="inventoryItem.SerialNumber" Label="Numéro de série / Service Tag" />
            <MudDatePicker @bind-Value="inventoryItem.RecoveryDate" Label="Date de récupération" />
            <MudTextField @bind-Value="inventoryItem.VerifiedBy" Label="Ajouté par" />
            <MudTextField @bind-Value="inventoryItem.Description" Label="Description" Lines="3" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Enregistrer</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private InventoryItem inventoryItem = new InventoryItem() { RecoveryDate = DateTime.Today };
    private List<Brand> brands = new List<Brand>();

    protected override async Task OnParametersSetAsync()
    {
        brands = await _inventoryService.GetBrandsAsync();
        inventoryItem.RecoveryDate = DateTime.Today;
    }

    private async Task HandleValidSubmit()
    {
        await _inventoryService.AddInventoryItemAsync(inventoryItem);
        NavigationManager.NavigateTo("/");
    }

    public async Task HandleInvalidSubmit()
    {
        StateHasChanged();
    }
}