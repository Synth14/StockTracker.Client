@page "/editinventory/{id:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StockTracker.Client.Models
@using StockTracker.Client.Services.InventoryService
@using System.Text.Json
@inject IInventoryService _inventoryService
@inject NavigationManager NavigationManager
@using MudBlazor
@using System

<MudText Typo="Typo.h3" GutterBottom="true">Modifier le matériel</MudText>

@if (inventoryItem == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    try
    {
    <EditForm Model="@inventoryItem" OnValidSubmit="@HandleValidSubmit" FormName="editForm">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudSelect T="string" @bind-Value="inventoryItem.Brand" Label="Marque">
                    <MudSelectItem Value="@string.Empty">Choisir une marque</MudSelectItem>
                    @foreach (var brand in brands)
                    {
                        <MudSelectItem Value="@brand.Name">@brand.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="inventoryItem.Model" Label="Modèle" />
                    <MudSelect T="string" @bind-Value="inventoryItem.Type" Label="Type">
                        <MudSelectItem Value="@string.Empty">Choisir un Type</MudSelectItem>
                        @foreach (var type in types)
                        {
                            <MudSelectItem Value="@type.TypeName">@type.TypeName</MudSelectItem>
                        }
                    </MudSelect>
                <MudTextField @bind-Value="inventoryItem.SerialNumber" Label="Numéro de série / Service tag" />
                <MudDatePicker @bind-Value="inventoryItem.RecoveryDate" Label="Date de récupération" />
                <MudDatePicker @bind-Value="inventoryItem.VerificationDate" Label="Date de vérification" />
                <MudTextField @bind-Value="inventoryItem.VerifiedBy" Label="Vérifier par" />
                <MudTextField @bind-Value="inventoryItem.Description" Label="Description" Lines="3" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Enregistrer</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
    catch (Exception ex)
    {
        <MudAlert Severity="Severity.Error">
            Une erreur s'est produite : @ex.Message
        </MudAlert>
    }
    }

@code {
    [Parameter] public int id { get; set; }
    private InventoryItem inventoryItem;
    private List<Brand> brands = new List<Brand>();
    private List<Models.Type> types = new List<Models.Type>();

    protected override async Task OnParametersSetAsync()
    {
        types = await _inventoryService.GetTypesAsync();
        brands = await _inventoryService.GetBrandsAsync();
        inventoryItem = await _inventoryService.GetInventoryItemAsync(id);
        StateHasChanged();

    }
    private async Task HandleValidSubmit()
    {
        await _inventoryService.UpdateInventoryItemAsync(id, inventoryItem);
        NavigationManager.NavigateTo("/");
    }
}