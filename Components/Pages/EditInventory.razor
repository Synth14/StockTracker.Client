@page "/editinventory/{id:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using StockTracker.Client.Models
@using StockTracker.Client.Services.InventoryService
@using System.Text.Json
@inject IInventoryService _inventoryService
@inject NavigationManager NavigationManager


<h1>Edit Inventory Item</h1>

@if (inventoryItem == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@inventoryItem" OnValidSubmit="@HandleValidSubmit" FormName="editForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label for="brand">Brand: </label>
            <InputSelect id="brand" class="form-control" @bind-Value="inventoryItem.Brand">
                <option value="">Select a brand...</option>
                @foreach (var brand in brands)
                {
                    <option value="@brand.Name">@brand.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="() => inventoryItem.Brand" />
        </p>
        <p>
            <label for="model">Model: </label>
            <InputText id="model" @bind-Value="inventoryItem.Model" />
            <ValidationMessage For="() => inventoryItem.Model" />
        </p>
        <p>
            <label for="serialNumber">Serial Number: </label>
            <InputText id="serialNumber" @bind-Value="inventoryItem.SerialNumber" />
            <ValidationMessage For="() => inventoryItem.SerialNumber" />
        </p>
        <p>
            <label for="recoveryDate">Recovery Date: </label>
            <InputDate id="recoveryDate" @bind-Value="inventoryItem.RecoveryDate" />
            <ValidationMessage For="() => inventoryItem.RecoveryDate" />
        </p>
        <p>
            <label for="verificationDate">Verification Date: </label>
            <InputDate id="verificationDate" @bind-Value="inventoryItem.VerificationDate" />
            <ValidationMessage For="() => inventoryItem.VerificationDate" />
        </p>
        <p>
            <label for="verifiedBy">Verified By: </label>
            <InputText id="verifiedBy" @bind-Value="inventoryItem.VerifiedBy" />
            <ValidationMessage For="() => inventoryItem.VerifiedBy" />
        </p>
        <p>
            <label for="description">Description: </label>
            <InputText id="description" @bind-Value="inventoryItem.Description" />
            <ValidationMessage For="() => inventoryItem.Description" />
        </p>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter] public int id { get; set; }
    private InventoryItem inventoryItem;
    private List<Brand> brands = new List<Brand>();
    protected override async Task OnInitializedAsync()
    {
        brands = await _inventoryService.GetBrandsAsync();
        inventoryItem = await _inventoryService.GetInventoryItemAsync(id);
    }

    private async Task HandleValidSubmit()
    {
        await _inventoryService.UpdateInventoryItemAsync(id, inventoryItem);
        NavigationManager.NavigateTo("/inventory");
        // Create a patch document
        // var patchDoc = new JsonPatchDocument<InventoryItem>();

        // // // Add operations to the patch document
        // patchDoc.Replace(e => e.Brand, inventoryItem.Brand);
        // patchDoc.Replace(e => e.Model, inventoryItem.Model);
        // patchDoc.Replace(e => e.SerialNumber, inventoryItem.SerialNumber);
        // patchDoc.Replace(e => e.RecoveryDate, inventoryItem.RecoveryDate);
        // patchDoc.Replace(e => e.VerificationDate, inventoryItem.VerificationDate);
        // patchDoc.Replace(e => e.VerifiedBy, inventoryItem.VerifiedBy);
        // patchDoc.Replace(e => e.Description, inventoryItem.Description);

        // Console.WriteLine($"Patch Document: {JsonSerializer.Serialize(patchDoc)}");

        // try
        // {
        //     await _inventoryService.PatchInventoryItemAsync(id, patchDoc);
        //     NavigationManager.NavigateTo("/inventory");
        // }
        // catch (HttpRequestException ex)
        // {
        //     Console.WriteLine($"Error patching item: {ex.Message}");
        // }
    }
}