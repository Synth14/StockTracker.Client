@page "/addinventory"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using StockTracker.Client.Models
@using StockTracker.Client.Services
@using MudBlazor
@using System.Text.Json;
@inject ILogger<AddInventory> Logger
@inject IInventoryService _inventoryService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<MudText Typo="Typo.h3" GutterBottom="true">Ajout de matériel</MudText>

<EditForm Model="@inventoryItem" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" FormName="AddInventory">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudCard>
        <MudCardContent>
            <MudSelect T="string" Label="Marque" @bind-Value="inventoryItem.Brand">
                <MudSelectItem Value="@string.Empty">Choisir une marque</MudSelectItem>
                @foreach (var brand in brands)
                {
                    <MudSelectItem Value="@brand.Name">@brand.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" Label="Type" @bind-Value="inventoryItem.Type">
                <MudSelectItem Value="@string.Empty">Choisir un Type</MudSelectItem>
                @foreach (var type in types)
                {
                    <MudSelectItem Value="@type.TypeName">@type.TypeName</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="inventoryItem.Model" Label="Modèle" />
            <MudTextField @bind-Value="inventoryItem.SerialNumber" Label="Numéro de série / Service Tag" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
            }
            <MudDatePicker @bind-Value="inventoryItem.RecoveryDate" Label="Date de récupération" />
            <MudTextField @bind-Value="inventoryItem.VerifiedBy" Label="Ajouté par" />
            <MudTextField @bind-Value="inventoryItem.Description" Label="Description" Lines="3" />
            <InputDate @bind-Value="inventoryItem.VerificationDate" style="display: none;" />

        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Enregistrer</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    private InventoryItem inventoryItem = new InventoryItem() { RecoveryDate = DateTime.Today };
    private List<Brand> brands = new List<Brand>();
    private List<Models.Type> types = new List<Models.Type>();
    private string errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        inventoryItem.VerificationDate = DateTime.Today;
        inventoryItem.State = State.Reçu;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var nameClaim = user.FindFirst(c => c.Type == "name");
            if (nameClaim != null)
            {
                inventoryItem.VerifiedBy = nameClaim.Value;
            }
        }
        brands = await _inventoryService.GetBrandsAsync();
        types = await _inventoryService.GetTypesAsync();

        inventoryItem.RecoveryDate = DateTime.Today;
    }

    private async Task HandleValidSubmit()
    {
        var result = await _inventoryService.AddInventoryItemAsync(inventoryItem);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var errorObject = JsonSerializer.Deserialize<ErrorResponse>(result.ErrorMessage);

            if ((errorObject?.Errors?.ContainsKey("Description") ?? false))
            {
                // Extraire spécifiquement l'erreur de Description
                errorMessage = string.Join(", ", errorObject.Errors["Description"]);
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
            StateHasChanged();
        }
    }
    private class ErrorResponse
    {
        public Dictionary<string, string[]> Errors { get; set; }
    }

    public async Task HandleInvalidSubmit(EditContext editContext)
    {
        var validationMessages = editContext.GetValidationMessages();
        foreach (var message in validationMessages)
        {
            Logger.LogWarning($"Validation error: {message}");
        }
        StateHasChanged();
    }
}